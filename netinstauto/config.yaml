preseed_vars:
  debian_installer:
    # Preseeding only locale sets language, country and locale.
    # The values can also be preseeded individually for greater flexibility.
    locale: en_US
    language: null
    country: null
    # By default the installer requires that repositories be authenticated
    # using a known gpg key. This setting can be set to false to disable that
    # authentication. Warning: Insecure, not recommended.
    allow_unauthenticated: null
    # Use the following option to add additional boot parameters for the
    # installed system (if supported by the bootloader installer).
    # Note: options passed to the installer will be added automatically.
    add-kernel-opts: null
    # Set to true to make the installer shutdown when finished, but not
    # reboot into the installed system.
    exit_halt: null
    # This will power off the machine instead of just halting it.
    exit_poweroff: null
  localechooser:
    # Optionally specify additional locales to be generated.
    # FIXME - this should be a list
    supported_locales: null
  keyboard_configuration:
    # Keyboard selection.
    xkb_keymap: us
    toggle: null
  netcfg:
    ### Network configuration
    # Disable network configuration entirely. This is useful for cdrom
    # installations on non-networked devices where the network questions,
    # warning and long timeouts are a nuisance.
    enable: null
    # netcfg will choose an interface that has link if possible. This makes it
    # skip displaying a list if there is more than one interface.
    choose_interface: auto
    # To pick a particular interface instead:
    #choose_interface: eth1
    # ---------------------
    # To set a different link detection timeout (default is 3 seconds).
    # Values are interpreted as seconds.
    link_wait_timeout: null
    # If you have a slow dhcp server and the installer times out waiting for
    # it, this might be useful.
    # example is 60
    dhcp_timeout: null
    dhcpv6_timeout: null
    # set to true to configure
    # network manually
    # If you prefer to configure the network manually, set disable_autoconfig
    # to true and set the static network configuration below.
    disable_autoconfig: null
    # If you want the preconfiguration file to work on systems both with and
    # without a dhcp server, uncomment these lines and the static network
    # configuration below.
    dhcp_failed: null
    #dhcp_options: Configuration network manually
    dhcp_options: null
    # Static Network Settings
    get_ipaddress: null
    get_netmask: null
    get_gateway: null
    get_nameservers: null
    # set to true to confirm after setting static options above
    confirm_static: null
    # Any hostname and domain names assigned from dhcp take precedence over
    # values set here. However, setting the values still prevents the questions
    # from being shown, even if values come from dhcp.
    get_hostname: unassigned-hostname
    get_domain: unassigned-domain
    # If you want to force a hostname, regardless of what either the DHCP
    # server returns or what the reverse DNS entry for the IP is, adjust
    # the following line.
    hostname: null
    # Disable that annoying WEP key dialog.
    wireless_wep:
    # The wacky dhcp hostname that some ISPs use as a password of sorts.
    dhcp_hostname: null
  hw_detect:
    # If non-free firmware is needed for the network or other hardware, set to
    # true to configure the installer to always try to load it, without
    # prompting. Or change to false to disable asking.
    load_firmware: null
  ### Network console
  # Use the following settings if you wish to make use of the network-console
  # component for remote installation over SSH. This only makes sense if you
  # intend to perform the remainder of the installation manually.
  anna:
    #choose_modules: network-console
    choose_modules: null
  network_console:
    #d-i anna/choose_modules string network-console
    #d-i network-console/authorized_keys_url string 
    #d-i network-console/password password r00tme
    #d-i network-console/password-again password r00tme
    enable_network_console: false
    #authorized_keys_url: http://10.0.0.1/openssh-key
    authorized_keys_url: null
    password: null
    password_again: null
  mirror:
    country: null
    hostname: ftp.us.debian.org
    directory: /debian
    proxy: null
    # Suite to install.
    suite: null
    # Suite to use for loading installer components (optional).
    udeb_suite: null
  ### Account setup
  passwd:
    root_login: null
    # Skip creation of a root account (normal user account will be able to
    # use sudo).
    #root_login: false
    # Alternatively, to skip creation of a normal user account.
    make_user: null
    #make_user: false
    # Root password, either in clear text
    root-password: null
    root-password-again: null
    # or encrypted using a crypt(3)  hash.
    root-password-crypted: null
    # To create a normal user account.
    user-fullname: null
    username: null
    #user-fullname: Debian User
    #username: debian
    # Normal user's password, either in clear text
    user-password: null
    user-password-again: null
    # or encrypted using a crypt(3) hash.
    user-password-crypted: null
    # Create the first user with the specified UID instead of the default.
    user-uid: null
    user-gid: null
    # The user account will be added to some standard initial groups. To
    # override that, use this.
    # a list of groups
    user-default-groups: null
    #user-default-groups:
    #  - audio
    #  - video
    #  - cdrom
    #  - staff
  ### Clock and time zone setup
  clock_setup:
    # Controls whether or not the hardware clock is set to UTC.
    utc: true
    # Controls whether to use NTP to set the clock during the install
    ntp: true
    # NTP server to use. The default is almost always fine here.
    ntp_server: null
  time:
    # You may set this to any valid setting for $TZ; see the contents of
    # /usr/share/zoneinfo/ for valid values.
    zone: null
  ### Partitioning
  partman_auto:
    # If the system has free space you can choose to only partition that space.
    # This is only honoured if partman-auto/method (below) is not set.
    #init_automatically_partition: biggest_free
    init_automatically_partition: null
    # Alternatively, you may specify a disk to partition. If the system has only
    # one disk the installer will default to using that, but otherwise the device
    # name must be given in traditional, non-devfs format (so e.g. /dev/sda
    # and not e.g. /dev/discs/disc0/disc).
    # For example, to use the first SCSI/SATA hard disk:
    #disk: /dev/sda
    disk: null
    # In addition, you'll need to specify the method to use.
    # The presently available methods are:
    # - regular: use the usual partition types for your architecture
    # - lvm:     use LVM to partition the disk
    # - crypto:  use LVM within an encrypted partition
    #method: lvm
    method: null
    # You can choose one of the three predefined partitioning recipes:
    # - atomic: all files in one partition
    # - home:   separate /home partition
    # - multi:  separate /home, /var, and /tmp partitions
    choose_recipe: null
    # Or provide a recipe of your own...
    # If you have a way to get a recipe file into the d-i environment, you can
    # just point at it.
    #expert_recipe_file /hd-media/recipe
    expert_recipe_file: null
    # FIXME work on recipe maker
    expert_recipe: null
  partman_lvm:
    # If one of the disks that are going to be automatically partitioned
    # contains an old LVM configuration, the user will normally receive a
    # warning. This can be preseeded away...
    device_remove_lvm: true
    # And the same goes for the confirmation to write the lvm partitions.
    confirm: true
    confirm_nooverwrite: true
  partman_md:
    # The same applies to pre-existing software RAID array:
    device_remove_md: true
    confirm: true
  # This makes partman automatically partition without confirmation, provided
  # that you told it what to do using one of the methods above.
  partman_partitioning:
    confirm_write_new_label: true
  partman:
    choose_partition: finish
    confirm: true
    confirm_nooverwrite: true
    # The default is to mount by UUID, but you can also choose "traditional" to
    # use traditional device names, or "label" to try filesystem labels before
    # falling back to UUIDs.
    #mount_style: uuid
    mount_style: null
    # This command is run immediately before the partitioner starts. It may be
    # useful to apply dynamic partitioner preseeding that depends on the state
    # of the disks (which may not be visible when preseed/early_command runs).
    #early_command:
    # debconf-set partman-auto/disk "$(list-devices disk | head -n1)"
    early_command: null
  ### Base system installation
  base_installer:
    # Configure APT to not install recommended packages by default. Use of this
    # option can result in an incomplete system and should only be used by very
    # experienced users.
    #install_recommends: false
    install_recommends: null
    # The kernel image (meta) package to be installed; "none" can be used if no
    # kernel is to be installed.
    kernel_image: null
  ### Apt setup
  apt_setup:
    # You can choose to install non-free and contrib software.
    non-free: true
    contrib: true
    # Set this to false if you don't want to use a network mirror
    use_mirror: null
    # Select which update services to use; define the mirrors to be used.
    # Values shown below are the normal defaults.
    services_select: null
    #services_select:
    #  - security
    #  - updates
    security_host: null
    #security_host: security.debian.org
    # Additional repositories, local[0-9] available
    # FIXME: implement this
    additional_sources:
      local0:
        repository: null
        comment: null
        # set to true to enable deb-src lines
        source: null
        # set key to url of repo public key
        key: null
    # set multiarch to i386 to add multiarch configuration for i386
    multiarch: null
    # Don't scan more cd's
    cdrom:
      # https://unix.stackexchange.com/a/409237
      # Scan another CD or DVD?
      set_first: false
      set_next: false
      set_failed: false
  tasksel:
    first: null
    #first: 
    #  - standard
    #  - ssh-server
  pkgsel:
    # Individual additional packages to install
    include: null
    #include:
    #  - aptitude
    #  - build-essential
    # Whether to upgrade packages after debootstrap.
    # Allowed values: none, safe-upgrade, full-upgrade
    upgrade: null
  popcon:
    # Some versions of the installer can report back on what software you have
    # installed, and what software you use. The default is not to report back,
    # but sending reports helps the project determine what software is most
    # popular and include it on CDs.
    participate: false
  grub_installer:
    skip: null
    # This is fairly safe to set, it makes grub install automatically to the MBR
    # if no other operating system is detected on the machine.
    only_debian: true
    # This one makes grub-installer install to the MBR if it
    # also finds some other OS, which is less safe as it might
    # not be able to boot that other OS.
    with_other_os: true
    # Due notably to potential USB sticks, the location of the MBR can not be
    # determined safely in general, so this needs to be specified:
    #bootdev: /dev/sda
    # To install to the first device (assuming it is not a USB stick):
    #bootdev: default
    bootdev: null
    # Alternatively, if you want to install to a location other than the mbr,
    # edit the only_debian, with_other_os, and bootdev options
    # To install grub to multiple disks:
    #bootdev: (hd0,1) (hd1,1) (hd2,1)
    # Optional password for grub, either in clear text
    password: null
    password-again: null
    # or encrypted using an MD5 hash, see grub-md5-crypt(8).
    password-crypted: null
  lilo_installer:
    # if you want to install lilo, instead of grub
    # set grub_installer.skip above to true
    # you can also skip lilo and install no bootloader
    # by setting skip to true below
    skip: null
  finish_install:
    keep_consoles: null
    # change to null to see the reboot note and stop the install
    reboot_in_progress: note
  cdrom_detect:
    # set to false to prevent installer from ejecting the CD during the reboot,
    # which is useful in some situations.
    eject: null
  preseed:
    ### Running custom commands during the installation
    # d-i preseeding is inherently not secure. Nothing in the installer checks
    # for attempts at buffer overflows or other exploits of the values of a
    # preconfiguration file like this one. Only use preconfiguration files from
    # trusted locations! To drive that home, and because it's generally useful,
    # here's a way to run any shell command you'd like inside the installer,
    # automatically.
    # This first command is run as early as possible, just after
    # preseeding is read.
    #early_command: anna-install some-udeb
    early_command: null
    # This command is run just before the install finishes, but when there is
    # still a usable /target directory. You can chroot to /target and use it
    # directly, or use the apt-install and in-target commands to easily install
    # packages and run commands in the target system.
    #late_command: apt-install zsh; in-target chsh -s /bin/zsh
    late_command: null
    
### Preseeding other packages
# Depending on what software you choose to install, or if things go wrong
# during the installation process, it's possible that other questions may
# be asked. You can preseed those too, of course. To get a list of every
# possible question that could be asked during an install, do an
# installation, and then run these commands:
#   debconf-get-selections --installer > file
#   debconf-get-selections >> file
